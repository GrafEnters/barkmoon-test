Тестовое задание предназначено для того, чтобы оценить ваши навыки
владения технологиями UNITY, а также умение взаимодействовать в Backend игры –
отправлять запросы на сервер и получать ответы на них.
1.​ Технологии, которые вы должны использовать:
●​ Zenject
●​ UnityWebRequest / http client
По желанию
●​ Unirx + Unitask
●​ Dotween
2.​ Технологии, которые не нужно использовать:
●​ ECS
●​ Photon/Mirror
3.​ Unity Version 2022.3 +
4.​ Требования к использованию паттернов:
●​ MVC/MVP,
●​ Zenject factory/Pool либо Object pool, либо ваши кастомные решения
5.​ Паттерны которые не нужно использовать
●​ Singleton
Приложение будет состоять из трех вкладок, которые можно переключить в
нижней навигационной панели. Первая вкладка кликер, вторая вкладка список погода,
третья вкладка список фактов. Вкладки должны переключатся.
Взаимодействие с сервером должно быть реализовано, посредством очереди
исполняемых запросов. То есть, все запросы к серверу должны выполняться друг за
другом, после завершения предыдущего запроса выполняется следующий в очереди.
В очередь должна быть возможность добавлять запросы и получать результат
выполненного запроса.

Вкладка 1. Кликер
1.В середине экрана находится кнопка, при нажатии на которую начисляется 1
единица валюты.
2. Нужно сделать систему автосбора валюты – каждые 3 секунды кнопка
нажимается сама(со всеми fvx, п.4), даже если игрок ничего не делает, ему
начисляется 1 единица валюты.
3. Нужно сделать систему энергии, которая тратится на автосбор и на тапы по
кнопке. Энергия начисляется каждые 10 секунд по 10 единиц энергии. Максимальное
количество энергии - 1000. Изначально игроку дается максимальное значение энергии.
Каждый клик по кнопке стоит 1 единицу энергии. Каждое срабатывание системы
автосбора также стоит 1 единицу энергии.
4. VFX нажатия на кнопку из п.1
4.1 Партикл на разлет частиц.

4.2 Анимация полета единицы валюты наверх.
4.3 Визуальный отыгрыш самой кнопки.
4.4 Звуковое сопровождение. Любые значения (стоимости, награды, балансы)
должны быть настраиваемыми из Scriptable Object. UI ⦁ Окна должны быть
адаптивными, и подстраиваться под разное разрешение экрана. ⦁ Должен быть
счетчик валюты ⦁ Должен быть счетчик энергии

Вкладка 2. Вкладка с погодой
API - https://api.weather.gov/gridpoints/TOP/32,81/forecast
Каждые 5 секунд в очередь встает запрос на получение погоды, при условии
того, что пользователь находится на вкладке с погодой. Если пользователь уйдет на
другую вкладку, то должно произойти следующее:
●​ Если запрос был отправлен, то отменить его.
●​ Если такой запрос есть в очереди, то удалить его из очереди.
Когда запрос обработается необходимо вывести погоду в формате:
(иконка погоды) Сегодня - 61F
Вкладка 3. Список пород и факты
API - https://dogapi.dog/docs/api-v2

Когда мы переходим на вкладку “Породы собак” , в очередь встает запрос на
получение списка пород собак. Нужно показать загрузчик, пока выполняется запрос.
Нужно будет получить породы из запроса breeds, и вывести их в формате
1 - name
2 - name
и так далее
Достаточно будет 10-ти пород.
Породы кликабельны.

По нажатию на породу, в очередь встает запрос на получение данных(фактов) о
породе по его айдишнику.
Пока данные идут, нужно показать индикатор загрузки данных, например:

Загрузчик висит пока данные не придут.
Как придут данные, нужно вывести поп ап с названием породы и ее описанием.
Нужно будет сделать один общий поп ап, с адаптивной высотой, в зависимости
от длины контента.

Если пользователь нажмет на другую породу
1.​ Запрос должен отмениться если он на данный момент исполняется, либо
удалить его из очереди, если таковой есть
2.​ Загрузчик уйти
3.​ Встать в очередь новый запрос для новой породы.

Если пользователь захочет перейти на другую вкладку
1.​ Исполняемый запрос со списком пород/информацию о породе должен
отмениться, если он на данный момент исполняется, либо удалить его из
очереди, если таковой есть

